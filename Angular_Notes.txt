COMPONENT BASED APPROACH
	trying to figure out different portions of a web-page that can separated out and can be created as a individual components
	A component in Angular can be considered as a small application with an associated template. It has a selector and will (usually) render the template, whereever the selector-tag is located.
	e.g.
	Root
		header
		side-bar
			nav
			updates
		main-area
			info-section
			details-section
		footer

PLATFORM:
	- The entry point for Angular on a web page. Each page has exactly one platform, and services (such as reflection) which are common to every Angular application running on the page are bound in its scope.
	- There potentially can be many applications on one platform.
MODULES:
	- Angular apps are modular and Angular has its own modularity system called NgModules.
	- NgModules are containers for a cohesive block of code dedicated to an application domain, a workflow, or a closely related set of capabilities.
	- They can contain components, service providers, and other code files whose scope is defined by the containing NgModule.
	- They can import functionality that is exported from other NgModules, and export selected functionality for use by other NgModules.
	- Every Angular app has at least one NgModule class, the root module, which is conventionally named AppModule and resides in a file named app.module.ts
	@NgModule annotation metadata
		1. declarations: The components, directives, and pipes that belong to this NgModule.
		2. exports: The subset of declarations that should be visible and usable in the component templates of other NgModules.
		3. imports: Other modules whose exported classes are needed by component templates declared in this NgModule.
		4. providers: Creators of services that this NgModule contributes to the global collection of services; they become accessible in all parts of the app.
		5. bootstrap: The main application view, called the root component, which hosts all other app views. Only the root NgModule should set the bootstrap property.
COMPONENT:
	- Components define views, which are sets of screen elements that Angular can choose among and modify according to your program logic and data.
	- Components use services, which provide specific functionality not directly related to views. Service providers can be injected into components as dependencies, making your code modular, reusable, and efficient.



SETUP
	pre-requisites:
		Node.js (for front-end)
		Angular CLI package:
			Angular CLI is a tool to to initialize, develop, scaffold, and maintain Angular applications
			to install angular cli package use command "npm install -g @angular/cli"
	
	Enter the project initialization commands
		ng new my-first-project                // to initialize a new angular project with all required angular dependencies
		cd my-first-project                    // move the project directory
		ng serve                               // builds the project and start hosting the locally in default port(4200)

	Some terms from the initialized project:
		index.html    : default home page/teplate for the application
		main.ts       : default typescript file to hold the client side logic for the project
		style.css     : default style sheet for th project
		package.json  : list the dependencies which the project is using
		src           : a placeholder directory for holding the source code for the project
		src/app       : a placeholder directory for holding angular components. contains the 'app-root' component
		src/app/app.module.ts : also called root module, configures the project as an independent module. This AppModule is called by default from the main.ts


platformBrowserDynamic()  - creates a platform

Syntax for using ngFor :
	<div *ngFor="let phoneNumber of user.phone">{{ phoneNumber }}</div>
Syntax for using ngIf :
	<div *ngIf="user.phone.length > 0">
passing input to component and retrieving the input
	passing as proprties for the component
		<app-address-card userName="Name Goes Here"></app-address-card>
	fetching in the component object
		@Input('userName')
		userName : string;